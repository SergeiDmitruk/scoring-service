// Code generated by mockery v2.53.3. DO NOT EDIT.

package server

import (
	context "context"

	models "github.com/scoring-service/pkg/models"
	mock "github.com/stretchr/testify/mock"

	service "github.com/scoring-service/internal/service"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AuthorizeUser provides a mock function with given fields: ctx, user
func (_m *MockService) AuthorizeUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AuthorizeUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeUser'
type MockService_AuthorizeUser_Call struct {
	*mock.Call
}

// AuthorizeUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *MockService_Expecter) AuthorizeUser(ctx interface{}, user interface{}) *MockService_AuthorizeUser_Call {
	return &MockService_AuthorizeUser_Call{Call: _e.mock.On("AuthorizeUser", ctx, user)}
}

func (_c *MockService_AuthorizeUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockService_AuthorizeUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockService_AuthorizeUser_Call) Return(_a0 error) *MockService_AuthorizeUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AuthorizeUser_Call) RunAndReturn(run func(context.Context, *models.User) error) *MockService_AuthorizeUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, userID, orderNum
func (_m *MockService) CreateOrder(ctx context.Context, userID int, orderNum string) service.CreateStatus {
	ret := _m.Called(ctx, userID, orderNum)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 service.CreateStatus
	if rf, ok := ret.Get(0).(func(context.Context, int, string) service.CreateStatus); ok {
		r0 = rf(ctx, userID, orderNum)
	} else {
		r0 = ret.Get(0).(service.CreateStatus)
	}

	return r0
}

// MockService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - orderNum string
func (_e *MockService_Expecter) CreateOrder(ctx interface{}, userID interface{}, orderNum interface{}) *MockService_CreateOrder_Call {
	return &MockService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, userID, orderNum)}
}

func (_c *MockService_CreateOrder_Call) Run(run func(ctx context.Context, userID int, orderNum string)) *MockService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockService_CreateOrder_Call) Return(_a0 service.CreateStatus) *MockService_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_CreateOrder_Call) RunAndReturn(run func(context.Context, int, string) service.CreateStatus) *MockService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithdraw provides a mock function with given fields: ctx, userID, withdraw
func (_m *MockService) CreateWithdraw(ctx context.Context, userID int, withdraw models.Withdraw) service.CreateStatus {
	ret := _m.Called(ctx, userID, withdraw)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithdraw")
	}

	var r0 service.CreateStatus
	if rf, ok := ret.Get(0).(func(context.Context, int, models.Withdraw) service.CreateStatus); ok {
		r0 = rf(ctx, userID, withdraw)
	} else {
		r0 = ret.Get(0).(service.CreateStatus)
	}

	return r0
}

// MockService_CreateWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithdraw'
type MockService_CreateWithdraw_Call struct {
	*mock.Call
}

// CreateWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - withdraw models.Withdraw
func (_e *MockService_Expecter) CreateWithdraw(ctx interface{}, userID interface{}, withdraw interface{}) *MockService_CreateWithdraw_Call {
	return &MockService_CreateWithdraw_Call{Call: _e.mock.On("CreateWithdraw", ctx, userID, withdraw)}
}

func (_c *MockService_CreateWithdraw_Call) Run(run func(ctx context.Context, userID int, withdraw models.Withdraw)) *MockService_CreateWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(models.Withdraw))
	})
	return _c
}

func (_c *MockService_CreateWithdraw_Call) Return(_a0 service.CreateStatus) *MockService_CreateWithdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_CreateWithdraw_Call) RunAndReturn(run func(context.Context, int, models.Withdraw) service.CreateStatus) *MockService_CreateWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBalance provides a mock function with given fields: ctx, id
func (_m *MockService) GetUserBalance(ctx context.Context, id int) (models.Balance, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 models.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Balance, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Balance); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Balance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBalance'
type MockService_GetUserBalance_Call struct {
	*mock.Call
}

// GetUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockService_Expecter) GetUserBalance(ctx interface{}, id interface{}) *MockService_GetUserBalance_Call {
	return &MockService_GetUserBalance_Call{Call: _e.mock.On("GetUserBalance", ctx, id)}
}

func (_c *MockService_GetUserBalance_Call) Run(run func(ctx context.Context, id int)) *MockService_GetUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockService_GetUserBalance_Call) Return(_a0 models.Balance, _a1 error) *MockService_GetUserBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetUserBalance_Call) RunAndReturn(run func(context.Context, int) (models.Balance, error)) *MockService_GetUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrders provides a mock function with given fields: ctx, id
func (_m *MockService) GetUserOrders(ctx context.Context, id int) ([]models.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetUserOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrders'
type MockService_GetUserOrders_Call struct {
	*mock.Call
}

// GetUserOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockService_Expecter) GetUserOrders(ctx interface{}, id interface{}) *MockService_GetUserOrders_Call {
	return &MockService_GetUserOrders_Call{Call: _e.mock.On("GetUserOrders", ctx, id)}
}

func (_c *MockService_GetUserOrders_Call) Run(run func(ctx context.Context, id int)) *MockService_GetUserOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockService_GetUserOrders_Call) Return(_a0 []models.Order, _a1 error) *MockService_GetUserOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetUserOrders_Call) RunAndReturn(run func(context.Context, int) ([]models.Order, error)) *MockService_GetUserOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithdrawals provides a mock function with given fields: ctx, id
func (_m *MockService) GetUserWithdrawals(ctx context.Context, id int) ([]models.Withdrawal, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Withdrawal, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Withdrawal); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetUserWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithdrawals'
type MockService_GetUserWithdrawals_Call struct {
	*mock.Call
}

// GetUserWithdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockService_Expecter) GetUserWithdrawals(ctx interface{}, id interface{}) *MockService_GetUserWithdrawals_Call {
	return &MockService_GetUserWithdrawals_Call{Call: _e.mock.On("GetUserWithdrawals", ctx, id)}
}

func (_c *MockService_GetUserWithdrawals_Call) Run(run func(ctx context.Context, id int)) *MockService_GetUserWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockService_GetUserWithdrawals_Call) Return(_a0 []models.Withdrawal, _a1 error) *MockService_GetUserWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetUserWithdrawals_Call) RunAndReturn(run func(context.Context, int) ([]models.Withdrawal, error)) *MockService_GetUserWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// ReagisterUser provides a mock function with given fields: ctx, user
func (_m *MockService) ReagisterUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ReagisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ReagisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReagisterUser'
type MockService_ReagisterUser_Call struct {
	*mock.Call
}

// ReagisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *MockService_Expecter) ReagisterUser(ctx interface{}, user interface{}) *MockService_ReagisterUser_Call {
	return &MockService_ReagisterUser_Call{Call: _e.mock.On("ReagisterUser", ctx, user)}
}

func (_c *MockService_ReagisterUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockService_ReagisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockService_ReagisterUser_Call) Return(_a0 error) *MockService_ReagisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ReagisterUser_Call) RunAndReturn(run func(context.Context, *models.User) error) *MockService_ReagisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserExist provides a mock function with given fields: ctx, login
func (_m *MockService) UserExist(ctx context.Context, login string) (bool, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for UserExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_UserExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExist'
type MockService_UserExist_Call struct {
	*mock.Call
}

// UserExist is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *MockService_Expecter) UserExist(ctx interface{}, login interface{}) *MockService_UserExist_Call {
	return &MockService_UserExist_Call{Call: _e.mock.On("UserExist", ctx, login)}
}

func (_c *MockService_UserExist_Call) Run(run func(ctx context.Context, login string)) *MockService_UserExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_UserExist_Call) Return(_a0 bool, _a1 error) *MockService_UserExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_UserExist_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockService_UserExist_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
