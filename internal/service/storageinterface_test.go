// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import (
	context "context"

	models "github.com/scoring-service/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockStorage) CreateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *MockStorage_Expecter) CreateUser(ctx interface{}, user interface{}) *MockStorage_CreateUser_Call {
	return &MockStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockStorage_CreateUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockStorage_CreateUser_Call) Return(_a0 error) *MockStorage_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateUser_Call) RunAndReturn(run func(context.Context, *models.User) error) *MockStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingOrders provides a mock function with given fields: ctx
func (_m *MockStorage) GetPendingOrders(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingOrders")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetPendingOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingOrders'
type MockStorage_GetPendingOrders_Call struct {
	*mock.Call
}

// GetPendingOrders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) GetPendingOrders(ctx interface{}) *MockStorage_GetPendingOrders_Call {
	return &MockStorage_GetPendingOrders_Call{Call: _e.mock.On("GetPendingOrders", ctx)}
}

func (_c *MockStorage_GetPendingOrders_Call) Run(run func(ctx context.Context)) *MockStorage_GetPendingOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_GetPendingOrders_Call) Return(_a0 []string, _a1 error) *MockStorage_GetPendingOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetPendingOrders_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockStorage_GetPendingOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBalance provides a mock function with given fields: ctx, userID
func (_m *MockStorage) GetUserBalance(ctx context.Context, userID int) (models.Balance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 models.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.Balance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBalance'
type MockStorage_GetUserBalance_Call struct {
	*mock.Call
}

// GetUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockStorage_Expecter) GetUserBalance(ctx interface{}, userID interface{}) *MockStorage_GetUserBalance_Call {
	return &MockStorage_GetUserBalance_Call{Call: _e.mock.On("GetUserBalance", ctx, userID)}
}

func (_c *MockStorage_GetUserBalance_Call) Run(run func(ctx context.Context, userID int)) *MockStorage_GetUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockStorage_GetUserBalance_Call) Return(_a0 models.Balance, _a1 error) *MockStorage_GetUserBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetUserBalance_Call) RunAndReturn(run func(context.Context, int) (models.Balance, error)) *MockStorage_GetUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *MockStorage) GetUserByLogin(ctx context.Context, login string) (*models.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type MockStorage_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *MockStorage_Expecter) GetUserByLogin(ctx interface{}, login interface{}) *MockStorage_GetUserByLogin_Call {
	return &MockStorage_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, login)}
}

func (_c *MockStorage_GetUserByLogin_Call) Run(run func(ctx context.Context, login string)) *MockStorage_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_GetUserByLogin_Call) Return(_a0 *models.User, _a1 error) *MockStorage_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockStorage_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrders provides a mock function with given fields: ctx, userID
func (_m *MockStorage) GetUserOrders(ctx context.Context, userID int) ([]models.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetUserOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrders'
type MockStorage_GetUserOrders_Call struct {
	*mock.Call
}

// GetUserOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockStorage_Expecter) GetUserOrders(ctx interface{}, userID interface{}) *MockStorage_GetUserOrders_Call {
	return &MockStorage_GetUserOrders_Call{Call: _e.mock.On("GetUserOrders", ctx, userID)}
}

func (_c *MockStorage_GetUserOrders_Call) Run(run func(ctx context.Context, userID int)) *MockStorage_GetUserOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockStorage_GetUserOrders_Call) Return(_a0 []models.Order, _a1 error) *MockStorage_GetUserOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetUserOrders_Call) RunAndReturn(run func(context.Context, int) ([]models.Order, error)) *MockStorage_GetUserOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithdrawals provides a mock function with given fields: ctx, userID
func (_m *MockStorage) GetUserWithdrawals(ctx context.Context, userID int) ([]models.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetUserWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithdrawals'
type MockStorage_GetUserWithdrawals_Call struct {
	*mock.Call
}

// GetUserWithdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockStorage_Expecter) GetUserWithdrawals(ctx interface{}, userID interface{}) *MockStorage_GetUserWithdrawals_Call {
	return &MockStorage_GetUserWithdrawals_Call{Call: _e.mock.On("GetUserWithdrawals", ctx, userID)}
}

func (_c *MockStorage_GetUserWithdrawals_Call) Run(run func(ctx context.Context, userID int)) *MockStorage_GetUserWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockStorage_GetUserWithdrawals_Call) Return(_a0 []models.Withdrawal, _a1 error) *MockStorage_GetUserWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetUserWithdrawals_Call) RunAndReturn(run func(context.Context, int) ([]models.Withdrawal, error)) *MockStorage_GetUserWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// IsOrderExists provides a mock function with given fields: ctx, orderNum
func (_m *MockStorage) IsOrderExists(ctx context.Context, orderNum string) (int, error) {
	ret := _m.Called(ctx, orderNum)

	if len(ret) == 0 {
		panic("no return value specified for IsOrderExists")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, orderNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, orderNum)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_IsOrderExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOrderExists'
type MockStorage_IsOrderExists_Call struct {
	*mock.Call
}

// IsOrderExists is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNum string
func (_e *MockStorage_Expecter) IsOrderExists(ctx interface{}, orderNum interface{}) *MockStorage_IsOrderExists_Call {
	return &MockStorage_IsOrderExists_Call{Call: _e.mock.On("IsOrderExists", ctx, orderNum)}
}

func (_c *MockStorage_IsOrderExists_Call) Run(run func(ctx context.Context, orderNum string)) *MockStorage_IsOrderExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_IsOrderExists_Call) Return(_a0 int, _a1 error) *MockStorage_IsOrderExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_IsOrderExists_Call) RunAndReturn(run func(context.Context, string) (int, error)) *MockStorage_IsOrderExists_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOrder provides a mock function with given fields: ctx, user, order
func (_m *MockStorage) SaveOrder(ctx context.Context, user int, order *models.Order) error {
	ret := _m.Called(ctx, user, order)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Order) error); ok {
		r0 = rf(ctx, user, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_SaveOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrder'
type MockStorage_SaveOrder_Call struct {
	*mock.Call
}

// SaveOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - user int
//   - order *models.Order
func (_e *MockStorage_Expecter) SaveOrder(ctx interface{}, user interface{}, order interface{}) *MockStorage_SaveOrder_Call {
	return &MockStorage_SaveOrder_Call{Call: _e.mock.On("SaveOrder", ctx, user, order)}
}

func (_c *MockStorage_SaveOrder_Call) Run(run func(ctx context.Context, user int, order *models.Order)) *MockStorage_SaveOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*models.Order))
	})
	return _c
}

func (_c *MockStorage_SaveOrder_Call) Return(_a0 error) *MockStorage_SaveOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_SaveOrder_Call) RunAndReturn(run func(context.Context, int, *models.Order) error) *MockStorage_SaveOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, accrual
func (_m *MockStorage) UpdateOrder(ctx context.Context, accrual *models.AccrualResponse) error {
	ret := _m.Called(ctx, accrual)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AccrualResponse) error); ok {
		r0 = rf(ctx, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type MockStorage_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - accrual *models.AccrualResponse
func (_e *MockStorage_Expecter) UpdateOrder(ctx interface{}, accrual interface{}) *MockStorage_UpdateOrder_Call {
	return &MockStorage_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, accrual)}
}

func (_c *MockStorage_UpdateOrder_Call) Run(run func(ctx context.Context, accrual *models.AccrualResponse)) *MockStorage_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.AccrualResponse))
	})
	return _c
}

func (_c *MockStorage_UpdateOrder_Call) Return(_a0 error) *MockStorage_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_UpdateOrder_Call) RunAndReturn(run func(context.Context, *models.AccrualResponse) error) *MockStorage_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, userID, order, sum
func (_m *MockStorage) Withdraw(ctx context.Context, userID int, order string, sum float64) error {
	ret := _m.Called(ctx, userID, order, sum)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, float64) error); ok {
		r0 = rf(ctx, userID, order, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockStorage_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - order string
//   - sum float64
func (_e *MockStorage_Expecter) Withdraw(ctx interface{}, userID interface{}, order interface{}, sum interface{}) *MockStorage_Withdraw_Call {
	return &MockStorage_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, userID, order, sum)}
}

func (_c *MockStorage_Withdraw_Call) Run(run func(ctx context.Context, userID int, order string, sum float64)) *MockStorage_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *MockStorage_Withdraw_Call) Return(_a0 error) *MockStorage_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Withdraw_Call) RunAndReturn(run func(context.Context, int, string, float64) error) *MockStorage_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
