// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/scoring-service/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// StorageInterface is an autogenerated mock type for the StorageInterface type
type StorageInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *StorageInterface) CreateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserBalance provides a mock function with given fields: ctx, userID
func (_m *StorageInterface) GetUserBalance(ctx context.Context, userID int) (models.Balance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 models.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.Balance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *StorageInterface) GetUserByLogin(ctx context.Context, login string) (*models.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserOrders provides a mock function with given fields: ctx, userID
func (_m *StorageInterface) GetUserOrders(ctx context.Context, userID int) ([]models.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithdrawals provides a mock function with given fields: ctx, userID
func (_m *StorageInterface) GetUserWithdrawals(ctx context.Context, userID int) ([]models.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrderExists provides a mock function with given fields: ctx, orderNum
func (_m *StorageInterface) IsOrderExists(ctx context.Context, orderNum string) (int, error) {
	ret := _m.Called(ctx, orderNum)

	if len(ret) == 0 {
		panic("no return value specified for IsOrderExists")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, orderNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, orderNum)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOrder provides a mock function with given fields: ctx, user, order
func (_m *StorageInterface) SaveOrder(ctx context.Context, user int, order *models.Order) error {
	ret := _m.Called(ctx, user, order)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Order) error); ok {
		r0 = rf(ctx, user, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, accrual
func (_m *StorageInterface) UpdateOrder(ctx context.Context, accrual *models.AccrualResponse) error {
	ret := _m.Called(ctx, accrual)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AccrualResponse) error); ok {
		r0 = rf(ctx, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, userID, order, sum
func (_m *StorageInterface) Withdraw(ctx context.Context, userID int, order string, sum float64) error {
	ret := _m.Called(ctx, userID, order, sum)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, float64) error); ok {
		r0 = rf(ctx, userID, order, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageInterface creates a new instance of StorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageInterface {
	mock := &StorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
